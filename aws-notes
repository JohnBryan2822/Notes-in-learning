

--> AWS CloudFormation: This service provides a way to model, provision, and manage AWS and third-party resources by treating infrastructure as code.
    CloudFormation allows you to use a simple text file, in JSON or YAML format, to model and provision, in an automated and secure manner, all the resources
    needed for your applications across all regions and accounts. This file serves as the single source of truth for your cloud environment.

--> AWS CloudFront: This is a content delivery network (CDN) service that securely delivers data, videos, applications, and APIs to customers globally
    with low latency and high transfer speeds. CloudFront works by caching content in edge locations closest to the end-users, thus improving the speed
    and efficiency of content delivery.

--> AWS WAF (Web Application Firewall): This is a web application firewall that helps protect web applications from common web exploits that could affect application availability,
    compromise security, or consume excessive resources. AWS WAF gives you control over which traffic to allow or block to your web applications by defining customizable web security rules.
    
--> AWS ALB (Application Load Balancer): This is a load balancer that automatically distributes incoming application traffic across multiple targets,
    such as Amazon EC2 instances, containers, IP addresses, and Lambda functions. It's best suited for load balancing of HTTP and HTTPS traffic, offering
    advanced routing features, SSL termination, and WebSocket support. ALBs are highly scalable and can adapt to changing incoming traffic patterns.
    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
--> Which instance in an ASG is terminated first when a scale-in happens?
	(Default Termination Policy) Within constraints, goal is to distribute instances evenly across available AZs. Next priority is to terminate older instances.
	
--> Preventing frequent scale up and down ?
	Adjust cooldown period to suit your need (default - 300 seconds). Align CloudWatch monitoring interval
	
--> I would want to protect newly launched instances from scale-in ?
	Enable instance scale-in protection
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
--> Network load balancer (Layer 4) can be assigned a Static IP / Elastic IP.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

==================
Security Group
==================

--> Can source/destination of a security group be another security group?
	Yes. It can even be same security group.

--> A new security group is created and assigned to a database and an ec2 instance. Can these instances talk to each other?
	No. New security group does not allow any incoming traffic from same security group. Two resources associated with same
	security group can talk with each other only if you configure rules allowing the traffic.
	
--> The default security group (unchanged) in the VPC is assigned to a database and an ec2 instance. Can these instances talk to each other?
	Yes. Default security group (by default) has a rule allowing traffic between resources with same security group.
	
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
====================
DynamoDB APIs
====================

    aws dynamodb scan \
    --table-name MyTodos \
     
    aws dynamodb scan \
    --table-name MyTodos \
    --filter-expression "attribute_exists(additional_attribute)"
     
    aws dynamodb query \
    --table-name MyTodos \
    --key-condition-expression "id=:id" \
    --expression-attribute-values '{":id": {"S": "2"} }'
     
    aws dynamodb scan \
    --table-name MyTodos \
    --projection-expression "username"
     
    aws dynamodb scan \
    --table-name MyTodos \
    --projection-expression "username, #desc" \
    --expression-attribute-names '{"#desc":"desc" }' \
    --output table
     
    aws dynamodb scan \
    --table-name MyTodos \
    --filter-expression "begins_with(username,:username)" \
    --expression-attribute-values '{":username": {"S": "Ranga"} }'
     
    aws dynamodb scan \
    --table-name MyTodos \
    --filter-expression "contains(#desc,:desc)" \
    --expression-attribute-names '{"#desc":"desc" }' \
    --expression-attribute-values '{":desc": {"S": "Dance"} }'
     
    aws dynamodb scan \
    --table-name MyTodos \
    --max-items 2
     
    aws dynamodb scan \
    --table-name MyTodos \
    --max-items 2 \
    --starting-token eyJFeGNsdXNpdmVTdGFydEtleSI6IG51bGwsICJib3RvX3RydW5jYXRlX2Ftb3VudCI6IDJ9
     
    aws dynamodb get-item \
    --table-name MyTodos \
    --key '{"id": {"S": "2"} }'
     
    aws dynamodb update-item \
    --table-name MyTodos \
    --key '{"id": {"S": "2"} }' \
    --update-expression "SET username=:username, newattr=:new" \
    --expression-attribute-values '{":username": {"S": "Ravi"}, ":new": {"S": "NEW_ATTR_VALUE"} }'
     
    aws dynamodb update-item \
    --table-name MyTodos \
    --key '{"id": {"S": "2"} }' \
    --update-expression "REMOVE newattr"
     
    aws dynamodb delete-item \
    --table-name MyTodos \
    --key '{"id": {"S": "2"} }' \
    --condition-expression "#desc=:desc" \
    --expression-attribute-names '{"#desc":"desc" }' \
    --expression-attribute-values '{":desc": {"S": "Get certified on AWS"} }'
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
